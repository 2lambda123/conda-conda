#!/usr/bin/env sh
# NOTE: This script should be sourced! The shebang is only here to help syntax highlighters.

if ! (return 0 2> /dev/null); then
    echo "ERROR: Source this script: . '$0'." >&2
    exit 1
fi

# parse args
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--python)
            _PYTHON="$2"
            shift
            shift
            ;;
        --python=*)
            _PYTHON="${1#*=}"
            shift
            ;;
        -u|--update)
            _UPDATE=0
            shift
            ;;
        -d|--devenv)
            _DEVENV="$2"
            shift
            shift
            ;;
        --devenv=*)
            _DEVENV="${1#*=}"
            shift
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [-p|--python VERSION] [-u|--update] [-d|--devenv PATH] [-h|--help]"
            echo ""
            echo "Options:"
            echo "  -p, --python  VERSION  Specify the Python version for the devenv (default: 3.8)"
            echo "  -u, --update           Force update packages (default: update every 24 hours)"
            echo "  -d, --devenv  PATH     Provide the desired devenv path (default: devenv/$(uname))"
            echo "  -h, --help             Display this"
            return 0
            ;;
        *)
            echo "Error: unknown option $1" >&2
            return 1
            ;;
    esac
done
_DEVENV="${_DEVENV:-$(pwd)/devenv/$(uname)}"
mkdir -p "${_DEVENV}"
_DEVENV="$( cd "${_DEVENV}" 2>&1 > /dev/null ; pwd -P)"
_PYTHON="${_PYTHON:-3.8}"
_UPDATE="${_UPDATE:-1}"

# deactivate any prior envs
if ! [ "${CONDA_SHLVL:-0}" = "0" ]; then
    echo "Deactivating ${CONDA_SHLVL} environments..."
    while ! [ "${CONDA_SHLVL:-0}" = "0" ]; do
        if ! conda deactivate; then
            echo "Error: failed to deactivate environment" 1>&2
            return 1
        fi
    done
fi

# get/set variables
_STUB="devenv-${_PYTHON}"
_ENV="${_DEVENV}/envs/${_STUB}"
_UPDATED="${_ENV}/.devenv-updated"
case "$(uname)" in
    Darwin|Linux) _CONDA_EXE="${_DEVENV}/bin/conda" ; _ENV_EXE="${_ENV}/bin/conda" ;;
               *) _CONDA_EXE="${_DEVENV}/Scripts/conda" ; _ENV_EXE="${_ENV}/Scripts/conda" ;;
esac

# does conda install exist?
if ! [ -f "${_DEVENV}/conda-meta/history" ]; then
    # downloading conda
    if ! [[ "$(uname)" == "Darwin" && -f "${_DEVENV}/miniconda.sh" ]] && \
        ! [[ "$(uname)" == "Linux" && -f "${_DEVENV}/miniconda.sh" ]] && \
        ! [[ -f "${_DEVENV}/miniconda.exe" ]]; then
        echo "Downloading conda..."
        case "$(uname)" in
            Darwin) curl -s "https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" -o "${_DEVENV}/miniconda.sh" ;;
             Linux) curl -s "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" -o "${_DEVENV}/miniconda.sh" ;;
                 *) powershell.exe -Command "Invoke-WebRequest -Uri 'https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe' -OutFile '${_DEVENV}/miniconda.exe' | Out-Null" ;;
        esac
        if ! [ $? = 0 ]; then
            echo "Error: failed to download conda" 1>&2
            return 1
        fi
    fi

    # installing conda
    echo "Installing conda..."
    case "$(uname)" in
        Darwin|Linux) bash "${_DEVENV}/miniconda.sh" -bfp "${_DEVENV}" > /dev/null ;;
                   *) cmd.exe /c "start /wait \"\" \"${_DEVENV}\miniconda.exe\" /InstallationType=JustMe /RegisterPython=0 /AddToPath=0 /S /D=${_DEVENV} > NUL" ;;
    esac
    if ! [ $? = 0 ]; then
        echo "Error: failed to install conda" 1>&2
        return 1
    fi
fi

# create empty env if it doesn't exist
if ! [ -d "${_ENV}" ]; then
    echo "Creating ${_STUB}..."
    if ! "${_CONDA_EXE}" create -yq -p "${_ENV}" > /dev/null; then
        echo "Error: failed to create ${_STUB}" 1>&2
        return 1
    fi
fi

# check if explicitly updating or if 24 hrs since last update
if [ "${_UPDATE}" = 0 ] || ! [ -f "${_UPDATED}" ] || (( $(( $(date +%s) - $(date -r "${_UPDATED}" +%s) )) >= 86400 )); then
    echo "Updating ${_STUB}..."

    case "$(uname)" in
        Linux) _EXTRA="patchelf" ;;
            *) _EXTRA="" ;;
    esac

    if ! "${_CONDA_EXE}" update -yq --all > /dev/null; then
        echo "Error: failed to update conda" 1>&2
        return 1
    fi

    if ! "${_CONDA_EXE}" install \
        -yq \
        -p "${_ENV}" \
        --override-channels \
        -c defaults \
        --file tests/requirements.txt \
        ${_EXTRA} \
        "python=${_PYTHON}" > /dev/null; then
        echo "Error: failed to update ${_STUB}" 1>&2
        return 1
    fi

    # update timestamp
    touch "${_UPDATED}"
fi

# initialize conda command
echo "Initializing conda..."
eval "$("${_CONDA_EXE}" init --dev bash)" > /dev/null
if ! [ $? = 0 ]; then
    echo "Error: failed to initialize conda" 1>&2
    return 1
fi

# activate dev env
echo "Activating ${_STUB}..."
if ! conda activate "${_ENV}" > /dev/null; then
    echo "Error: failed to activate ${_STUB}" 1>&2
    return 1
fi
export CONDA_EXE="${_ENV_EXE}"

# cleanup
unset _DEVENV _PYTHON _STUB _ENV _UPDATED _CONDA_EXE _ENV_EXE _EXTRA
