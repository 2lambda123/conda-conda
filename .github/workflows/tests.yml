# this is the sibling workflow to docs.yml, it is required to work around
# the skipped but required checks issue:
#   https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/troubleshooting-required-status-checks#handling-skipped-but-required-checks
name: Tests

on:
  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - main
      - feature/**
      - '[0-9].*.x'  # e.g., 4.14.x
      - '[0-9][0-9].*.x'  # e.g., 23.3.x

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  workflow_dispatch:

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
    # see https://github.com/conda/conda/pull/12524
    MINIO_RELEASE: 'archive/minio.RELEASE.2023-03-13T19-46-17Z'
    ACTIONS_STEP_DEBUG: true

jobs:
  # detect whether any code changes are included in this PR
  changes:
    runs-on: ubuntu-latest
    permissions:
      # necessary to detect changes
      # https://github.com/dorny/paths-filter#supported-workflows
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v3
        # dorny/paths-filter needs git clone for push events
        # https://github.com/dorny/paths-filter#supported-workflows
        if: github.event_name != 'pull_request'
      - uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          filters: |
            code:
              - 'conda/**'
              - 'conda_env/**'
              - 'tests/**'
              - '*.py'
              - 'recipe/**'
              - '.github/workflows/tests.yml'

  # linux test suite
  linux:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        # test all lower versions (w/ defaults) and upper version (w/ defaults and conda-forge)
        default-channel: ['defaults', 'conda-forge']
        python-version: ['3.8', '3.9', '3.10', '3.11']
        test-group: ['1', '2', '3', '4', '5']
        exclude:
          - default-channel: 'conda-forge'
            python-version: '3.8'
          - default-channel: 'conda-forge'
            python-version: '3.9'
          - default-channel: 'conda-forge'
            python-version: '3.10'
    env:
      OS: Linux
      PYTHON: ${{ matrix.python-version }}
      TEST_GROUP: ${{ matrix.test-group }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ./.github/ci/condarc.${{ matrix.default-channel }}
          python-version: ${{ matrix.python-version }}

      - name: Setup environment
        run: |
          ./.github/ci/install_minio.sh
          conda install --yes --file tests/requirements.txt
          conda-build \
            tests/test-recipes/activate_deactivate_package \
            tests/test-recipes/pre_link_messages_package

      - name: Show info
        run: |
          conda info --all
          conda list --show-channel-urls

      - name: Python ${{ matrix.python-version }} on ${{ matrix.default-channel }}, group ${{ matrix.test-group }}
        run: |
          python -m pytest \
            --cov=conda \
            --store-durations \
            --durations-path=./tools/durations/${{ runner.os }}.json \
            --splitting-algorithm=least_duration \
            -v \
            --splits=5 \
            --group=${{ matrix.test-group }}

      - uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }},${{ matrix.python-version }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          # name has to be unique, to not overwrite uploads of other matrix runs. sha1 is optional and only to differentiate
          # when locally dowloading and comparing results of different workflow runs.
          name: test-results-${{ github.sha }}-${{ runner.os }}-${{ matrix.default-channel }}-${{ matrix.python-version }}-${{ matrix.test-group }}
          path: |
            .coverage
            ./tools/durations/${{ runner.os }}.json
            test-report.xml
          retention-days: 1

  # linux-qemu test suite
  linux-qemu:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    # Run one single fast test per docker+qemu emulated linux platform to test that
    # test execution is possible there (container+tools+dependencies work). Can be
    # changed / extended to run specific tests in case there are platform related
    # things to test. Running more tests is time consuming due to emulation
    # (factor 2-10x slower).
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        default-channel: ['defaults', 'conda-forge']
        python-version: ['3.11']
        platform: ['arm64', 'ppc64le']
    env:
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        # Equivalent to locally run:
        #   `docker run --privileged --rm tonistiigi/binfmt --install all`

      - name: Python linux-${{ matrix.platform }} on ${{ matrix.default-channel }}, ${{ matrix.python-version }} tests
        run: >
          docker run
          --rm -v ${PWD}:/opt/conda-src
          --platform linux/${{ matrix.platform }}
          ghcr.io/conda/conda-ci:main-linux-python${{ matrix.python-version }}${{ matrix.default-channel == 'conda-forge' && '-conda-forge' || '' }}
          /opt/conda-src/.github/ci/qemu.sh

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          # name has to be unique, to not overwrite uploads of other matrix runs. sha1 is optional and only to differentiate
          # when locally dowloading and comparing results of different workflow runs.
          name: test-results-${{ github.sha }}-linux-${{ matrix.platform }}-qemu-${{ matrix.default-channel }}-${{ matrix.python-version }}
          path: |
            .coverage
            test-report.xml
          retention-days: 1

  # windows test suite
  windows:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        # test lower version (w/ defaults) and upper version (w/ defaults and conda-forge)
        default-channel: ['defaults', 'conda-forge']
        python-version: ['3.8', '3.11']
        test-group: ['1', '2', '3', '4', '5', '6']
        exclude:
          - default-channel: 'conda-forge'
            python-version: '3.8'
    env:
      OS: Windows
      PYTHON: ${{ matrix.python-version }}
      TEST_GROUP: ${{ matrix.test-group }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: .\.github\ci\condarc.${{ matrix.default-channel }}
          python-version: ${{ matrix.python-version }}

      - name: Setup environment
        run: |
          cmd /C .\.github\ci\install_minio.bat
          conda install --quiet --yes --file tests/requirements.txt pywin32
          conda-build `
            tests/test-recipes/activate_deactivate_package `
            tests/test-recipes/pre_link_messages_package

      - name: Show info
        run: |
          conda info --all
          conda list --show-channel-urls

      - name: Run tests
        run: |
          python -m pytest `
            --cov=conda `
            --store-durations `
            --durations-path=.\tools\durations\${{ runner.os }}.json `
            --splitting-algorithm=least_duration `
            -v `
            --splits=6 `
            --group=${{ matrix.test-group }}

      - uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }},${{ matrix.python-version }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          # name has to be unique, to not overwrite uploads of other matrix runs. sha1 is optional and only to differentiate
          # when locally dowloading and comparing results of different workflow runs.
          name: test-results-${{ github.sha }}-${{ runner.os }}-${{ matrix.default-channel }}-${{ matrix.python-version }}-${{ matrix.test-group }}
          path: |
            .coverage
            .\tools\durations\${{ runner.os }}.json
            test-report.xml
          retention-days: 1

  # macos test suite
  macos:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: macos-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          - default-channel: defaults
            python-version: '3.9'
            test-group: '1'
          - default-channel: conda-forge
            python-version: '3.9'
            test-group: '2'
          - default-channel: defaults
            python-version: '3.9'
            test-group: '3'
          - default-channel: conda-forge
            python-version: '3.9'
            test-group: '4'
          - default-channel: defaults
            python-version: '3.9'
            test-group: '5'
    env:
      OS: macOS
      PYTHON: ${{ matrix.python-version }}
      TEST_GROUP: ${{ matrix.test-group }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ./.github/ci/condarc.${{ matrix.default-channel }}
          python-version: ${{ matrix.python-version }}

      - name: Setup environment
        run: |
          ./.github/ci/install_minio.sh
          conda install --quiet --yes --file tests/requirements.txt
          conda-build \
            tests/test-recipes/activate_deactivate_package \
            tests/test-recipes/pre_link_messages_package

      - name: Show info
        run: |
          conda info --all
          conda list --show-channel-urls

      - name: Run tests
        run: |
          python -m pytest \
            --cov=conda \
            --store-durations \
            --durations-path=./tools/durations/${{ runner.os }}.json \
            --splitting-algorithm=least_duration \
            -v \
            --splits=5 \
            --group=${{ matrix.test-group }}

      - uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }},${{ matrix.python-version }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          # name has to be unique, to not overwrite uploads of other matrix runs. sha1 is optional and only to differentiate
          # when locally dowloading and comparing results of different workflow runs.
          name: test-results-${{ github.sha }}-${{ runner.os }}-${{ matrix.default-channel }}-${{ matrix.python-version }}-${{ matrix.test-group }}
          path: |
            .coverage
            ./tools/durations/${{ runner.os }}.json
            test-report.xml
          retention-days: 1

  # aggregate and upload
  aggregate:
    # only aggregate test suite if there are code changes
    needs: [changes, windows, linux, linux-qemu, macos]
    if: always() && needs.changes.outputs.code == 'true'

    runs-on: ubuntu-latest
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3

      - name: Upload combined test results
        # provides one downloadable archive of all .coverage/test-report.xml files
        # of all matrix runs for further analysis.
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ github.sha }}-all
          path: test-results-${{ github.sha }}-*
          retention-days: 90  # default: 90

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: ./test-results-${{ github.sha }}-**/test-report*.xml

  # required check
  analyze:
    name: Analyze results
    needs: [windows, linux, linux-qemu, macos, aggregate]
    if: always()

    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe
        with:
          allowed-skips: ${{ toJSON(needs) }}
          jobs: ${{ toJSON(needs) }}

  # canary builds
  build:
    name: Canary Build
    needs: [analyze]
    # only build canary build if
    # - prior steps succeeded,
    # - this is the main repo, and
    # - we are on the main, feature, or release branch
    if: >-
      always()
      && !github.event.repository.fork
      && (
        github.ref_name == 'main'
        || startsWith(github.ref_name, 'feature/')
        || endsWith(github.ref_name, '.x')
      )
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            subdir: linux-64
          - runner: macos-latest
            subdir: osx-64
          - runner: windows-latest
            subdir: win-64
    runs-on: ${{ matrix.runner }}
    steps:
      # Clean checkout of specific git ref needed for package metadata version
      # which needs env vars GIT_DESCRIBE_TAG and GIT_BUILD_STR:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          clean: true
          fetch-depth: 0

      - name: Create and upload canary build
        uses: conda/actions/canary-release@v22.10.0
        env:
          # Run conda-build in isolated activation to properly package conda
          _CONDA_BUILD_ISOLATED_ACTIVATION: 1
        with:
          package-name: ${{ github.event.repository.name }}
          subdir: ${{ matrix.subdir }}
          anaconda-org-channel: conda-canary
          anaconda-org-label: ${{ github.ref_name == 'main' && 'dev' || github.ref_name }}
          anaconda-org-token: ${{ secrets.ANACONDA_ORG_CONDA_CANARY_TOKEN }}
