# this is the sibling workflow to docs.yml, it is required to work around
# the skipped but required checks issue:
#   https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/troubleshooting-required-status-checks#handling-skipped-but-required-checks
name: Tests

on:
  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - main
      - feature/**
      - '[0-9].*.x'  # e.g., 4.14.x
      - '[0-9][0-9].*.x'  # e.g., 23.3.x

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  workflow_dispatch:

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  # detect whether any code changes are included in this PR
  changes:
    runs-on: ubuntu-latest
    permissions:
      # necessary to detect changes
      # https://github.com/dorny/paths-filter#supported-workflows
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v3
        # dorny/paths-filter needs git clone for push events
        # https://github.com/dorny/paths-filter#supported-workflows
        if: github.event_name != 'pull_request'
      - uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          filters: |
            code:
              - 'conda/**'
              - 'conda_env/**'
              - 'tests/**'
              - '*.py'
              - 'recipe/**'
              - '.github/workflows/tests.yml'
              - 'dev/**/setup.*'
              - 'dev/**/integration.*'
              - 'dev/**/unit.*'
              - 'dev/**/qemu.*'

  # linux test suite
  linux:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # test all lower versions (w/ defaults) and upper version (w/ defaults and conda-forge)
        default-channel: ['defaults', 'conda-forge']
        python-version: ['3.8', '3.9', '3.10', '3.11']
        test-type: ['unit', 'integration']
        test-group: ['1', '2', '3']
        exclude:
          - default-channel: 'conda-forge'
            python-version: '3.8'
          - default-channel: 'conda-forge'
            python-version: '3.9'
          - default-channel: 'conda-forge'
            python-version: '3.10'
          - default-channel: 'conda-forge'
            python-version: '3.11'
    env:
      OS: Linux
      PYTHON: ${{ matrix.python-version }}
      TEST_SPLITS: 3
      TEST_GROUP: ${{ matrix.test-group }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: prefix-dev/setup-pixi@v0.3.0
        with:
          pixi-version: v0.6.0
          cache: true

      - name: Install Python
        shell: pixi run bash {0}
        run: |
          pixi add python=${{ matrix.python-version }}
          pixi install

      - name: Python ${{ matrix.python-version }} on ${{ matrix.default-channel }}, ${{ matrix.test-type }} tests, group ${{ matrix.test-group }}
        shell: pixi run bash {0}
        run: |
          ./dev/linux/${{ matrix.test-type }}.sh

      - uses: codecov/codecov-action@v3
        with:
          flags: ${{ matrix.test-type }},${{ runner.os }},${{ matrix.python-version }}

      - name: Upload test results
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          # name has to be unique, to not overwrite uploads of other matrix runs. sha1 is optional and only to differentiate
          # when locally dowloading and comparing results of different workflow runs.
          name: test-results-${{ github.sha }}-${{ runner.os }}-${{ matrix.default-channel }}-${{ matrix.python-version }}-${{ matrix.test-type }}-${{ matrix.test-group }}
          path: |
            .coverage
            ./tools/durations/${{ runner.os }}.json
            test-report.xml
          retention-days: 1

  # aggregate and upload
  aggregate:
    # only aggregate test suite if there are code changes
    needs: [changes, linux]
    if: >-
      !cancelled()
      && needs.changes.outputs.code == 'true'

    runs-on: ubuntu-latest
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3

      - name: Upload combined test results
        # provides one downloadable archive of all .coverage/test-report.xml files
        # of all matrix runs for further analysis.
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ github.sha }}-all
          path: test-results-${{ github.sha }}-*
          retention-days: 90  # default: 90

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: ./test-results-${{ github.sha }}-**/test-report*.xml

  # required check
  analyze:
    name: Analyze results
    needs: [linux, aggregate]
    if: '!cancelled()'

    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe
        with:
          allowed-skips: ${{ toJSON(needs) }}
          jobs: ${{ toJSON(needs) }}

  # canary builds
  build:
    name: Canary Build
    needs: [analyze]
    # only build canary build if
    # - prior steps succeeded,
    # - this is the main repo, and
    # - we are on the main, feature, or release branch
    if: >-
      !cancelled()
      && !github.event.repository.fork
      && (
        github.ref_name == 'main'
        || startsWith(github.ref_name, 'feature/')
        || endsWith(github.ref_name, '.x')
      )
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            subdir: linux-64
          - runner: macos-latest
            subdir: osx-64
          - runner: windows-latest
            subdir: win-64
    runs-on: ${{ matrix.runner }}
    steps:
      # Clean checkout of specific git ref needed for package metadata version
      # which needs env vars GIT_DESCRIBE_TAG and GIT_BUILD_STR:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          clean: true
          fetch-depth: 0

      # Explicitly use Python 3.11 since each of the OSes has a different default Python
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Detect label
        shell: python
        run: |
          from pathlib import Path
          from re import match
          from os import environ

          if "${{ github.ref_name }}" == "main":
              # main branch commits are uploaded to the dev label
              label = "dev"
          elif "${{ github.ref_name }}".startswith("feature/"):
              # feature branch commits are uploaded to a custom label
              label = "${{ github.ref_name }}"
          else:
              # release branch commits are added to the rc label
              # see https://github.com/conda/infrastructure/issues/760
              _, name = "${{ github.repository }}".split("/")
              label = f"rc-{name}-${{ github.ref_name }}"

          Path(environ["GITHUB_ENV"]).write_text(f"ANACONDA_ORG_LABEL={label}")

      - name: Create and upload canary build
        uses: conda/actions/canary-release@v23.7.0
        env:
          # Run conda-build in isolated activation to properly package conda
          _CONDA_BUILD_ISOLATED_ACTIVATION: 1
        with:
          package-name: ${{ github.event.repository.name }}
          subdir: ${{ matrix.subdir }}
          anaconda-org-channel: conda-canary
          anaconda-org-label: ${{ env.ANACONDA_ORG_LABEL }}
          anaconda-org-token: ${{ secrets.ANACONDA_ORG_CONDA_CANARY_TOKEN }}
